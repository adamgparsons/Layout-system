//grid stuff
$site-width: 1048px;
$gutter: 32px;

//breakpoints from current design system
$breakpoint--sm: 555px;
$breakpoint--md: 850px;
$breakpoint--lg: 1024px;
$breakpoint--xl: 1400px;


//breakpoint variables for grid
$grid-bp--sm: $breakpoint--sm;
$grid-bp--md: $breakpoint--md;
$grid-bp--lg: $breakpoint--lg;

// Breakpoints
$bp-larger-than-mobile    : "min-width: 400px" !default;
$bp-larger-than-phablet   : "min-width: 550px" !default;
$bp-larger-than-tablet    : "min-width: 750px" !default;
$bp-larger-than-desktop   : "min-width: 1000px" !default;
$bp-larger-than-desktophd : "min-width: 1200px" !default;

//Gets column width
@function grid-column-width($n) {
  @return ($container-width - ($column-margin*(($total-columns/ $n)-1)))/($total-columns/ $n)
}


@function grid-offset-length($n) {
  @return grid-column-width($n) + $column-margin;
}

//Grid Variables
$container-width: 1048px !default;//How do i get a live update of the container width
$container-width-larger-than-mobile: 85% !default;
$container-width-larger-than-phablet: 80% !default;
$total-columns: 12 !default;
$column-width: 100 / $total-columns !default; // calculates individual column width based off of # of columns
$column-margin: 32px !default; // space between columns

//
.container {
  position: relative;
  width: 100%;
  max-width: $container-width;
  margin: 20px auto;
  padding: 0 20px;
  box-sizing: border-box;
}

.column,
.columns {
  width: 100%;
  float: left;
  box-sizing: border-box;
  background: lightblue;
  height:150px;
  margin-right: 0px
}

// For devices larger than 400px
@media (#{$bp-larger-than-mobile}) {
  .container {
    width: 85%;
    padding: 0;
  }
}

// For devices larger than 850px
@media (#{$bp-larger-than-phablet}) {
  .container {
    width: $bp-larger-than-tablet;
  }
  .column,
  .columns {
    margin-left: $column-margin;
  }
  .column:first-child,
  .columns:first-child {
    margin-left: 0;
  }


  .one-quarter.column   { width: grid-column-width(3);  }
  .one-third.column     { width: grid-column-width(4);  }
  .two-thirds.column    { width: grid-column-width(8);  }
  .one-half.column      { width: grid-column-width(6);  }
  .full-width.column    { width: 100%; margin-left: 0;  }

/*Offset columns -  may not be needed
  // Offsets
  .offset-by-one.column,
  .offset-by-one.columns       { margin-left: grid-offset-length(1);  }
  .offset-by-two.column,
  .offset-by-two.columns       { margin-left: grid-offset-length(2);  }
  .offset-by-three.column,
  .offset-by-three.columns     { margin-left: grid-offset-length(3);  }
  .offset-by-four.column,
  .offset-by-four.columns      { margin-left: grid-offset-length(4);  }
  .offset-by-five.column,
  .offset-by-five.columns      { margin-left: grid-offset-length(5);  }
  .offset-by-six.column,
  .offset-by-six.columns       { margin-left: grid-offset-length(6);  }
  .offset-by-seven.column,
  .offset-by-seven.columns     { margin-left: grid-offset-length(7);  }
  .offset-by-eight.column,
  .offset-by-eight.columns     { margin-left: grid-offset-length(8);  }
  .offset-by-nine.column,
  .offset-by-nine.columns      { margin-left: grid-offset-length(9);  }
  .offset-by-ten.column,
  .offset-by-ten.columns       { margin-left: grid-offset-length(10); }
  .offset-by-eleven.column,
  .offset-by-eleven.columns    { margin-left: grid-offset-length(11); }


  .offset-by-one-third.column,
  .offset-by-one-third.columns  { margin-left: grid-offset-length(4);  }
  .offset-by-two-thirds.column,
  .offset-by-two-thirds.columns { margin-left: grid-offset-length(8);  }

  .offset-by-one-half.column,
  .offset-by-one-half.column   { margin-left: grid-offset-length(6);  }
*/
}




.container:after,
.row:after,
.u-cf {
  content: "";
  display: table;
  clear: both;
}
